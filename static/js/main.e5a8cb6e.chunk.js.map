{"version":3,"sources":["App.js","index.js"],"names":["GifHome","observer","target","useState","sources","setSrc","offset","setOffset","query","setQuery","ref","useRef","load","handleApi","endpoint","fetch","response","json","jsonResp","data","console","log","useEffect","current","IntersectionObserver","handleObserver","options","observe","root","document","getElementById","rootMargin","threshold","entries","isIntersecting","prev","callApi","res","callSearchApi","className","id","onChange","e","value","onClick","map","item","src","images","preview_gif","url","alt","rootElement","createRoot","render"],"mappings":"wLAGe,SAASA,IACtB,IAmBIC,EAAUC,EAnBd,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA4BF,mBAAS,GAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA0BJ,mBAAS,IAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACMC,EAAMC,kBAAO,GACbC,EAAOD,iBAAO,MACdE,EAAS,iDAAG,kHAEVC,EAFU,mHAE6GR,GACvHE,IACFM,EAAQ,iHAA6GR,EAA7G,cAAyHE,IAJrH,SAMOO,MAAMD,GANb,cAMVE,EANU,gBAOOA,EAASC,OAPhB,cAOVC,EAPU,yBAQPA,EAASC,MARF,kCAUdC,QAAQC,IAAI,YAVE,0DAAH,qDAefC,qBAAU,WACJZ,EAAIa,UACNb,EAAIa,SAAU,EACdtB,EAAW,IAAIuB,qBAAqBC,EAAgBC,GAEhDd,EAAKW,UACPrB,EAASU,EAAKW,QACdtB,EAAS0B,QAAQzB,IAGtB,GAAE,IAEH,IAAIwB,EAAU,CACZE,KAAMC,SAASC,eAAe,mBAC9BC,WAAY,OACZC,UAAW,IAGPP,EAAc,iDAAG,WAAOQ,GAAP,+EACXA,EAAQ,GACVC,eAFa,gCAGb3B,GAAU,SAAC4B,GAAD,OAAUA,EAAO,CAAjB,IAHG,2CAAH,sDAOpBb,qBAAU,WACJZ,EAAIa,SACNa,IAEF1B,EAAIa,SAAU,CACf,GAAE,CAACjB,IACJ,IAAM8B,EAAO,iDAAG,8GACIvB,IADJ,OACRwB,EADQ,OAEdhC,GAAO,SAAC8B,GAAD,4BAAcA,GAAd,YAAuBE,GAAvB,IAFO,2CAAH,qDAKPC,EAAa,iDAAG,8GACFzB,IADE,OACdwB,EADc,OAEpBhC,GAAO,SAAC8B,GAAD,mBAAcE,EAAd,IAFa,2CAAH,qDAanB,OACE,sBAAKE,UAAU,YAAf,UACE,sBAAKA,UAAU,aAAf,UACE,uBAAOC,GAAG,WAAWC,SAXN,SAACC,GACpBjC,EAASiC,EAAExC,OAAOyC,MACnB,IAUK,wBAAQC,QARC,WACbrC,EAAU,GACV+B,GACD,EAKK,uBAEF,sBAAKC,UAAU,WAAWC,GAAG,kBAA7B,UACGpC,EAAQyC,KAAI,SAACC,GAAD,OACX,qBAEEC,IAAKD,EAAKE,OAAOC,YAAYC,IAC7BC,IAAI,aAFCL,EAAKN,GAFD,IAOb,qBAAK9B,IAAKE,SAIjB,CCtFD,IAAMwC,EAAcvB,SAASC,eAAe,QAC/BuB,qBAAWD,GAEnBE,OACH,cAAC,aAAD,UACE,cAACtD,EAAD,M","file":"static/js/main.e5a8cb6e.chunk.js","sourcesContent":["import \"./styles.css\";\nimport React, { useState, useEffect, useRef } from \"react\";\n\nexport default function GifHome() {\n  const [sources, setSrc] = useState([]);\n  const [offset, setOffset] = useState(0);\n  const [query, setQuery] = useState(\"\");\n  const ref = useRef(true);\n  const load = useRef(null);\n  const handleApi = async function () {\n    try {\n      let endpoint = `https://api.giphy.com/v1/gifs/trending?api_key=rXQdKfTgjQjWCSj9q8QlA8oN3yZsmpAa&limit=10&rating=g&offset=${offset}`;\n      if (query) {\n        endpoint = `https://api.giphy.com/v1/gifs/search?api_key=rXQdKfTgjQjWCSj9q8QlA8oN3yZsmpAa&limit=10&rating=g&offset=${offset}&q=${query}`;\n      }\n      let response = await fetch(endpoint);\n      let jsonResp = await response.json();\n      return jsonResp.data;\n    } catch (error) {\n      console.log(\"Error ..\");\n    }\n  };\n\n  let observer, target;\n  useEffect(() => {\n    if (ref.current) {\n      ref.current = false;\n      observer = new IntersectionObserver(handleObserver, options);\n\n      if (load.current) {\n        target = load.current;\n        observer.observe(target);\n      }\n    }\n  }, []);\n\n  let options = {\n    root: document.getElementById(\"items-container\"),\n    rootMargin: \"20px\",\n    threshold: 0.5\n  };\n\n  const handleObserver = async (entries) => {\n    let obj = entries[0];\n    if (obj.isIntersecting) {\n      await setOffset((prev) => prev + 5);\n    }\n  };\n\n  useEffect(() => {\n    if (ref.current) {\n      callApi();\n    }\n    ref.current = true;\n  }, [offset]);\n  const callApi = async () => {\n    const res = await handleApi();\n    setSrc((prev) => [...prev, ...res]);\n  };\n\n  const callSearchApi = async () => {\n    const res = await handleApi();\n    setSrc((prev) => [...res]);\n  };\n\n  const handleChange = (e) => {\n    setQuery(e.target.value);\n  };\n\n  const search = () => {\n    setOffset(0);\n    callSearchApi();\n  };\n  return (\n    <div className=\"container\">\n      <div className=\"search-bar\">\n        <input id=\"inputBox\" onChange={handleChange}></input>\n        <button onClick={search}>Search</button>\n      </div>\n      <div className=\"gif-list\" id=\"items-container\">\n        {sources.map((item) => (\n          <img\n            key={item.id}\n            src={item.images.preview_gif.url}\n            alt=\"Gif Image\"\n          />\n        ))}\n        <div ref={load}></div>\n      </div>\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport GifHome from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <GifHome />\n  </StrictMode>\n);\n"],"sourceRoot":""}